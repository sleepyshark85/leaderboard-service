// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PS.LeaderboardAPI.Data;

#nullable disable

namespace PS.LeaderboardAPI.Migrations
{
    [DbContext(typeof(LeaderboardDbContext))]
    partial class LeaderboardDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PS.LeaderboardAPI.Data.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("CurrentScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("current_score");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CurrentScore");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("CurrentScore"), "btree");

                    b.ToTable("players", (string)null);
                });

            modelBuilder.Entity("PS.LeaderboardAPI.Data.ScoreSubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("player_id");

                    b.Property<long>("Score")
                        .HasColumnType("bigint")
                        .HasColumnName("score");

                    b.Property<DateTime>("SubmittedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("ix_score_submissions_player_id");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PlayerId"), "btree");

                    b.HasIndex("Score")
                        .HasDatabaseName("ix_score_submissions_score");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Score"), "btree");

                    b.HasIndex("PlayerId", "Score")
                        .HasDatabaseName("ix_score_submissions_player_id_score");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PlayerId", "Score"), "btree");

                    b.ToTable("score_submissions", (string)null);
                });

            modelBuilder.Entity("PS.LeaderboardAPI.Data.ScoreSubmission", b =>
                {
                    b.HasOne("PS.LeaderboardAPI.Data.Player", null)
                        .WithMany("ScoreSubmissions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PS.LeaderboardAPI.Data.Player", b =>
                {
                    b.Navigation("ScoreSubmissions");
                });
#pragma warning restore 612, 618
        }
    }
}
